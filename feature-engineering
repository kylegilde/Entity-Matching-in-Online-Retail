# !/usr/bin/env/python365
"""
Created on Feb 23, 2019
@author: Kyle Gilde
"""
import os
import gc
from datetime import datetime

from urllib.parse import urlparse
import re
import string

import sys
import numpy as np
import pandas as pd
from pandas.io.json import json_normalize
from pandas.api.types import is_numeric_dtype, is_string_dtype
import matplotlib.pyplot as plt
import seaborn as sns


import json
import psutil
import multiprocessing as mp

from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer

# initialize constants
DATA_DIRECTORY = 'D:/Documents/Large-Scale Product Matching/'
os.chdir(DATA_DIRECTORY)
comparison_features = ['brand', 'category', 'description', 'gtin', 'identifier', 'manufacturer',
                       'mpn', 'name', 'price', 'productID', 'sku']


# set display options
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 500)

# load
if 'train_test_df_features.csv' in os.listdir():
    train_test_df_features = reduce_mem_usage(pd.read_csv('train_test_df_features.csv',
                                                      index_col='offer_id'))
    print(category_offers_df.info(memory_usage='deep'))



    features_regex_1, features_regex_2 = r'(' + '|'.join(comparison_features) + ')_1',\
                                         r'(' + '|'.join(comparison_features) + ')_2'
    features_1 = train_test_df_features.columns[train_test_df_features.columns.str.match(features_regex_1)]
    features_2 = train_test_df_features.columns[train_test_df_features.columns.str.match(features_regex_2)]

    feature_dtypes = train_test_df_features.dtypes.astype('str')[train_test_df_features.columns.str.match(features_regex_1)]

    distance_vectors_df = pd.DataFrame()
    for feature_dtype, comparison_feature, feature_1, feature_2 in zip(feature_dtypes, comparison_features, features_1, features_2):
        print(feature_dtype, comparison_feature, feature_1, feature_2)
        if feature_dtype == 'category':
            distance_vectors_df[comparison_feature] = pd.Series(train_test_df_features[feature_1] == train_test_df_features[feature_2]).astype('int8')
        elif feature_dtype == 'object':

            vectorizer = TfidfVectorizer(min_df=.05, ngram_range=(1, 1))
            n_rows = len(train_test_df_features)
            text_data = pd.concat([train_test_df_features['name_1'], train_test_df_features['name_2']]).fillna('')
            dtm = vectorizer.fit_transform(text_data)

            dtm_1, dtm_2 = dtm[: n_rows], dtm[n_rows: ]
            from sklearn.metrics.pairwise import cosine_similarity

            distance_vectors_df[comparison_feature] = cosine_similarity(dtm_1, dtm_2)
